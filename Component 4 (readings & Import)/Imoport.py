{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "063d74fa",
   "metadata": {},
   "source": [
    "## Importing the Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "292976ad",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: mysql-connector-python in /opt/anaconda3/lib/python3.9/site-packages (9.1.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install mysql-connector-python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "8e6e4430",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting pymysql\n",
      "  Downloading PyMySQL-1.1.1-py3-none-any.whl (44 kB)\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m45.0/45.0 kB\u001b[0m \u001b[31m542.9 kB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m \u001b[36m0:00:01\u001b[0m\n",
      "\u001b[?25hInstalling collected packages: pymysql\n",
      "Successfully installed pymysql-1.1.1\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install pymysql"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b8276d45",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Rows with null 'Station_Site_ID' removed. Remaining rows: 520743\n",
      "Data imported successfully.\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import mysql.connector\n",
    "\n",
    "# Connecting database information\n",
    "db_config = {\n",
    "    \"host\": \"localhost\",\n",
    "    \"user\": \"root\",    \n",
    "    \"password\": \"\",    \n",
    "    \"database\": \"AirQualityData\"    \n",
    "}\n",
    "\n",
    "csv_file_path = \"Cropped_Cleansed_AirQualityMeasurement.csv\" \n",
    "\n",
    "\n",
    "table_name = \"AirQualityMeasurement\"\n",
    "\n",
    "try:\n",
    "    df = pd.read_csv(csv_file_path)\n",
    "    \n",
    "    # We rename column 'Site_ID' to 'Station_Site_ID' so as to match with the csv data\n",
    "    if 'Site_ID' in df.columns:\n",
    "        df.rename(columns={\"Site_ID\": \"Station_Site_ID\"}, inplace=True)\n",
    "    else:\n",
    "        print(\"Column 'Site_ID' not found in the CSV file.\")\n",
    "        exit()\n",
    "    \n",
    "    # Remove rows with null values in 'Station_Site_ID'\n",
    "    if 'Station_Site_ID' in df.columns:\n",
    "        df.dropna(subset=['Station_Site_ID'], inplace=True)\n",
    "        print(f\"Rows with null 'Station_Site_ID' removed. Remaining rows: {len(df)}\")\n",
    "    else:\n",
    "        print(\"Column 'Station_Site_ID' not found in the dataset after renaming.\")\n",
    "        exit()\n",
    "    \n",
    "    # Reformat 'Date_Time' to match MySQL datetime format\n",
    "    if 'Date_Time' in df.columns:\n",
    "        df['Date_Time'] = pd.to_datetime(df['Date_Time'], errors='coerce')  # Convert to datetime\n",
    "        df['Date_Time'] = df['Date_Time'].dt.strftime('%Y-%m-%d %H:%M:%S')  # Format as MySQL datetime\n",
    "        if df['Date_Time'].isnull().any():\n",
    "            print(\"Warning: Some 'Date_Time' values could not be converted. Check the data.\")\n",
    "    else:\n",
    "        print(\"Column 'Date_Time' not found in the dataset.\")\n",
    "        exit()\n",
    "except Exception as e:\n",
    "    print(f\"Error reading the CSV file: {e}\")\n",
    "    exit()\n",
    "\n",
    "try:\n",
    "    connection = mysql.connector.connect(**db_config)\n",
    "    cursor = connection.cursor()\n",
    "except mysql.connector.Error as err:\n",
    "    print(f\"Database connection error: {err}\")\n",
    "    exit()\n",
    "\n",
    "\n",
    "try:\n",
    "    for _, row in df.iterrows():\n",
    "        # Create an SQL INSERT query with placeholders\n",
    "        placeholders = \", \".join([\"%s\"] * len(df.columns))\n",
    "        columns = \", \".join(df.columns)\n",
    "        sql_query = f\"INSERT INTO {table_name} ({columns}) VALUES ({placeholders})\"\n",
    "        \n",
    "        # Execute the query with row data\n",
    "        cursor.execute(sql_query, tuple(row))\n",
    "    \n",
    "    # Commit the transaction\n",
    "    connection.commit()\n",
    "    print(\"Data imported successfully.\")\n",
    "except Exception as e:\n",
    "    connection.rollback()\n",
    "    print(f\"Error inserting data into the database: {e}\")\n",
    "finally:\n",
    "    cursor.close()\n",
    "    connection.close()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "de45d996",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date_Time</th>\n",
       "      <th>NOx</th>\n",
       "      <th>NO2</th>\n",
       "      <th>NO</th>\n",
       "      <th>PM10</th>\n",
       "      <th>O3</th>\n",
       "      <th>Temperature</th>\n",
       "      <th>ObjectId</th>\n",
       "      <th>ObjectId2</th>\n",
       "      <th>NVPM10</th>\n",
       "      <th>VPM10</th>\n",
       "      <th>NVPM2_5</th>\n",
       "      <th>PM2_5</th>\n",
       "      <th>VPM2_5</th>\n",
       "      <th>CO</th>\n",
       "      <th>RH</th>\n",
       "      <th>Pressure</th>\n",
       "      <th>SO2</th>\n",
       "      <th>Station_Site_ID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2019-04-29 23:00:00</td>\n",
       "      <td>122.25</td>\n",
       "      <td>49.25</td>\n",
       "      <td>47.75</td>\n",
       "      <td>30.400000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>501.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2019-04-30 03:00:00</td>\n",
       "      <td>42.25</td>\n",
       "      <td>35.25</td>\n",
       "      <td>4.50</td>\n",
       "      <td>20.275000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>501.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2019-01-05 06:00:00</td>\n",
       "      <td>82.00</td>\n",
       "      <td>48.50</td>\n",
       "      <td>21.75</td>\n",
       "      <td>28.125000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>501.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2019-01-05 18:00:00</td>\n",
       "      <td>357.25</td>\n",
       "      <td>117.75</td>\n",
       "      <td>156.50</td>\n",
       "      <td>27.700001</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>501.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2019-02-05 14:00:00</td>\n",
       "      <td>194.50</td>\n",
       "      <td>73.25</td>\n",
       "      <td>79.25</td>\n",
       "      <td>23.775000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>501.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Date_Time     NOx     NO2      NO       PM10  O3  Temperature  \\\n",
       "0  2019-04-29 23:00:00  122.25   49.25   47.75  30.400000 NaN          NaN   \n",
       "1  2019-04-30 03:00:00   42.25   35.25    4.50  20.275000 NaN          NaN   \n",
       "2  2019-01-05 06:00:00   82.00   48.50   21.75  28.125000 NaN          NaN   \n",
       "3  2019-01-05 18:00:00  357.25  117.75  156.50  27.700001 NaN          NaN   \n",
       "4  2019-02-05 14:00:00  194.50   73.25   79.25  23.775000 NaN          NaN   \n",
       "\n",
       "   ObjectId  ObjectId2  NVPM10  VPM10  NVPM2_5  PM2_5  VPM2_5  CO  RH  \\\n",
       "0       NaN          1     NaN    NaN      NaN    NaN     NaN NaN NaN   \n",
       "1       NaN          2     NaN    NaN      NaN    NaN     NaN NaN NaN   \n",
       "2       NaN          3     NaN    NaN      NaN    NaN     NaN NaN NaN   \n",
       "3       NaN          4     NaN    NaN      NaN    NaN     NaN NaN NaN   \n",
       "4       NaN          5     NaN    NaN      NaN    NaN     NaN NaN NaN   \n",
       "\n",
       "   Pressure  SO2  Station_Site_ID  \n",
       "0       NaN  NaN            501.0  \n",
       "1       NaN  NaN            501.0  \n",
       "2       NaN  NaN            501.0  \n",
       "3       NaN  NaN            501.0  \n",
       "4       NaN  NaN            501.0  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a5e9835d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(520743, 19)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "18097365",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
